# Generated by Django 3.1.13 on 2021-08-12 06:40

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='L1Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='名称')),
                ('title', models.CharField(max_length=255, verbose_name='显示名称')),
                ('path', models.CharField(help_text='需要 /，例如: /resource', max_length=255, unique=True, verbose_name='URI')),
                ('redirect', models.CharField(help_text='访问一级菜单跳转到子节点 URI，例如: /resource/host', max_length=255, verbose_name='定向')),
                ('icon', models.CharField(default='tree', max_length=255, verbose_name='菜单图标')),
                ('order', models.IntegerField(default=10, help_text='菜单排序，小的排前面', verbose_name='排序')),
            ],
            options={
                'verbose_name': '一级菜单',
                'verbose_name_plural': '一级菜单',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='L2Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='显示名称')),
                ('path', models.CharField(help_text='不需要 /，例如: user', max_length=255, verbose_name='URI')),
                ('component', models.CharField(help_text='相对于 /views 的路径, 例如: /resource/host', max_length=255, verbose_name='部件')),
                ('order', models.IntegerField(default=10, help_text='菜单排序，小的排前面', verbose_name='排序')),
                ('is_model', models.BooleanField(default=True, verbose_name='是否对应模型')),
                ('name', models.ForeignKey(blank=True, help_text='绑定模型', limit_choices_to={'app_label__in': ['report']}, null=True, on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype', verbose_name='模型')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='children', to='authperm.l1menu', verbose_name='父菜单')),
            ],
            options={
                'verbose_name': '二级菜单',
                'verbose_name_plural': '二级菜单',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=11, unique=True, verbose_name='手机号码')),
                ('hosted', models.BooleanField(default=False, verbose_name='主持早会')),
                ('hosted_date', models.DateField(blank=True, null=True, verbose_name='主持日期')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
